Specification "pts".
Import "contexts".

Close sort.
Theorem eq_ctx' : forall G U V K G' G'' D M T, nabla x, {G |- of U (st K)} -> {G |- of V (st K)} -> append (G' x) (of x U::G) (G'' x) -> append (G' x) (of x V::G) (D x) -> ctx_r (G'' x) -> {eq U V} -> {G'' x |- of (M x) (T x)} -> {(D x) |- of (M x) (T x)}.
induction on 7. intros. case H7.
apply member_of_name to _ H8. case H9.
apply append_member to H3 H8.
case H10.
apply append_member_l to H4 H11.
search.
case H11.
assert (member (of n2 (T2 n1)) (of n1 (V n2)::G n2)).
apply append_member_r to H4 H13.
search.
apply append_member to H3 H8.
case H10.
apply member_fresh_append to _ H3 H11.
case H11.
assert (member (of n1 V) (of n1 V :: G)).
apply append_member_r to H4 H12.
assert {D n1 |- of n1 V}.
assert {G,of n1 V |- of U (st K)}.
apply weaken_several to H4 H15.
search.
apply member_prune to H12.
case H8. apply member_of_name to _ H9. case H10.
search.
apply IH to H1 H2 _ _ _ H6 H10 with x = n1, G' = x\ of n2 (U1 x) :: (G' x).
apply IH to H1 H2 _ _ _ _ H9.
apply rule_strengthen to _ H8 with D = D n1.
search.
assert (append (of n2 (U1 n1)::(G' n1)) (of n1 U::G) (of n2 (U1 n1)::(G'' n1))).
apply IH to H1 H2 H12 _ _ H6 H10.
apply IH to H1 H2 _ _ _ _ H9.
apply IH to H1 H2 H12 _ _ _ H11.
apply rule_strengthen to _ H8 with D = D n1.
search.
apply IH to H1 H2 _ _ _ _ H8.
apply IH to H1 H2 _ _ _ _ H9.
search.
apply IH to H1 H2 _ _ _ _ H9.
apply IH to H1 H2 _ _ _ _ H10.
apply eq_str to _ H8.
search.

Theorem eq_ctx : forall G U V K M T, nabla x, ctx_r G -> {G |- of U (st K)} -> {G |- of V (st K)} -> {eq U V} -> {G, of x U |- of (M x) (T x)} -> {G, of x V |- of (M x) (T x)}.
intros.
apply eq_ctx' to H2 H3 _ _ _ H4 H5. search.

Theorem eq_incl_step : forall M N, {step M N} -> {eq M N}.
intros. search.

Theorem eq_for_congr_l : forall U V T, {eq U V} -> {eq (for U T) (for V T)}.
induction on 1. intros. case H1. search. search. apply IH to H2 with T = T. search.
apply IH to H2 with T = T. apply IH to H3 with T = T. search.

Theorem eq_for_congr_r : forall U T1 T2, nabla x, {eq (T1 x) (T2 x)} -> {eq (for U T1) (for U T2)}.
induction on 1. intros. case H1. search. search.
apply IH to H2 with U = U. search.
apply IH to H2 with U = U. apply IH to H3 with U = U. search.

Theorem eq_for_congr : forall U V T1 T2, nabla x, {eq U V} -> {eq (T1 x) (T2 x)} -> {eq (for U T1) (for V T2)}.
intros. apply eq_for_congr_l to H1 with T = T2. apply eq_for_congr_r to H2 with U = U. search.

Theorem eq_abs_congr_l : forall U V T, {eq U V} -> {eq (abs U T) (abs V T)}.
induction on 1. intros. case H1. search. search. apply IH to H2 with T = T. search.
apply IH to H2 with T = T. apply IH to H3 with T = T. search.

Theorem eq_abs_congr_r : forall U T1 T2, nabla x, {eq (T1 x) (T2 x)} -> {eq (abs U T1) (abs U T2)}.
induction on 1. intros. case H1. search. search.
apply IH to H2 with U = U. search.
apply IH to H2 with U = U. apply IH to H3 with U = U. search.

Theorem eq_abs_congr : forall U V T1 T2, nabla x, {eq U V} -> {eq (T1 x) (T2 x)} -> {eq (abs U T1) (abs V T2)}.
intros. apply eq_abs_congr_l to H1 with T = T2. apply eq_abs_congr_r to H2 with U = U. search.

Theorem eq_app_congr_l : forall U V T, {eq U V} -> {eq (app U T) (app V T)}.
induction on 1. intros. case H1. search. search. apply IH to H2 with T = T. search.
apply IH to H2 with T = T. apply IH to H3 with T = T. search.

Theorem eq_app_congr_r : forall U V T, {eq U V} -> {eq (app T U) (app T V)}.
induction on 1. intros. case H1. search. search. apply IH to H2 with T = T. search.
apply IH to H2 with T = T. apply IH to H3 with T = T. search.

Theorem eq_app_congr : forall U V T1 T2, {eq U V} -> {eq T1 T2} -> {eq (app U T1) (app V T2)}.
intros. apply eq_app_congr_l to H1 with T = T2. apply eq_app_congr_r to H2 with T = U. search.

Theorem eq_subst'' : forall G G' G'' U K K1 T M N, nabla x, {G |- of U (st K)} -> append (G' x) (of x U::G) (G'' x) -> ctx_r (G'' x) -> {eq M N} -> {G'' x |- of (T x) (K1 x)} -> {eq (T M) (T N)}.
induction on 5. intros. case H5.
apply member_of_name to _ H6. case H7. search. search. search.
apply IH to _ _ _ H4 H7.
apply IH to _ _ _ H4 H8 with x = n1.
apply eq_for_congr to H9 H10. search.
apply IH to _ _ _ H4 H7.
apply IH to _ _ _ H4 H8 with x = n1.
apply IH to _ _ _ H4 H9 with x = n1.
apply eq_abs_congr to H10 H12. search.
apply IH to _ _ _ H4 H6.
apply IH to _ _ _ H4 H7.
apply eq_app_congr to H8 H9. search.
apply IH to _ _ _ H4 H7.
apply IH to _ _ _ H4 H8.
search.

Theorem eq_subst' : forall G U K K1 T M N, nabla x, ctx_r G -> {G |- of U (st K)} -> {G, of x U |- of (T x) (K1 x)} -> {eq M N} -> {eq (T M) (T N)}.
intros.
apply eq_subst'' to H2 _ _ H4 H3. search.
