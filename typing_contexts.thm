Specification "typing".

Define name : tm -> prop by
  nabla x, name x.

Define ctx : olist -> prop by
  ctx nil;
  nabla x, ctx (of x T :: wf x :: G ) := ctx G /\ exists K, {G |- of T (st K)} .

Define is_of : o -> prop by
  nabla x, is_of (of x T);
  nabla x, is_of (wf x).

Theorem member_of_name : forall G E, ctx G -> member E G -> is_of E.
induction on 2. intros. case H2.
case H1. search. case H1. case H3.
search.
apply IH to _ H6. search.

Theorem mem_of_wf : forall G M T , ctx G -> member (of M T) G -> member (wf M) G.
induction on 2. intros. case H2. case H1. search.
case H1. case H3. apply IH to _ H6. search.

Theorem kinds : forall G M T, ctx G -> member (of M T) G -> exists K, {G |- of T (st K)}.
induction on 2. intros. case H2.
case H1. search. case H1. case H3.
apply IH to _ H6.
search.

/* This appears to be the only theorem that depends on what we take for "axioms" of the PTS */
Theorem axiom_strengthen : forall G D S1 S2, ctx G -> {G |- axiom S1 S2} -> {D |- axiom S1 S2}.
intros. case H2. apply member_of_name to _ H3. case H4.
search.

/* This appears to be the only theorem that depends on what we take for "rules" of the PTS. */
Theorem rule_strengthen : forall G D S1 S2 S3, ctx G -> {G |- rule S1 S2 S3} -> {D |- rule S1 S2 S3}.
intros. case H2. apply member_of_name to _ H3. case H4.
search. search. search. search.

Theorem wf_str : forall G T N, nabla x, {G,wf x, of x T |- wf (N x)} -> {G,wf x |- wf (N x)}.
induction on 1. intros. case H1. case H2. case H3. search.
search. search. apply IH to H2. apply IH to H3. search.
apply IH to H2. apply IH to H3. search. apply IH to H2. apply IH to H3. search.

Theorem of_wf_l : forall G M T, ctx G -> {G |- of M T} -> {G |- wf M}.
induction on 2. intros. case H2. apply mem_of_wf to _ H3. search.
search. apply IH to _ H4. apply IH to _ H5. apply wf_str to H7. search.
apply IH to _ H4. apply IH to _ H5. apply IH to _ H6. apply wf_str to H8. apply wf_str to H9.
search.
apply IH to _ H4. apply IH to _ H3. search. apply IH to _ H4. apply IH to _ H5. search.

Theorem of_wf : forall G M T, ctx G -> {G |- of M T} -> {G |- wf T}.
induction on 2. intros. case H2. apply kinds to _ H3.
apply of_wf_l to _ H4. search.
search.
search.
apply of_wf_l to _ H4. apply of_wf_l to _ H5. apply wf_str to H8. search.
apply IH to _ H3. case H5. apply member_of_name to _ H6. case H7.
apply of_wf_l to _ H4. inst H7 with n1 = N.
cut H9. search.
apply of_wf_l to _ H4. search.


